//! This file is generated by inklang, see <https://github.com/inklang/inklang>.
//! Do not edit it directly since it'll be overwritten.

#[derive(Debug, Clone)]
pub struct Feed {
    pub name: String,
    pub identifier: String,
    pub is_default: bool,
}
pub async fn get_feeds() -> inklang_array::Of<Feed> {
    let url: inklang_url::Url =
        inklang_url::parse("http://webservices-v2.crous-mobile.fr/feed/feeds.json".to_string());
    let request: inklang_http::Request =
        inklang_http::create_request("GET".to_string(), url, inklang_http::create_headers());
    let response: inklang_http::Response = inklang_http::send_request(request).await;
    let body: String = inklang_http::read_response_body_as_string(response).await;
    let mut json: inklang_json::Value = inklang_json::parse(body);
    let mut feeds: inklang_array::Of<Feed> = inklang_array::create();
    for mut feed in inklang_json::as_array(inklang_json::get_property!(json, "results".to_string()))
    {
        let name: String = inklang_string::strip_all(
            inklang_json::as_string(inklang_json::get_property!(feed, "name".to_string())),
            "FLUX ".to_string(),
        );
        let parts: inklang_array::Of<String> = inklang_string::split(
            inklang_json::as_string(inklang_json::get_property!(feed, "url".to_string())),
            "/".to_string(),
        );
        let identifier: String = inklang_array::value_at_index(parts, 4);
        feeds = inklang_array::push(
            feeds,
            Feed {
                name,
                identifier,
                is_default: inklang_json::as_boolean(inklang_json::get_property!(
                    feed,
                    "is_default".to_string()
                )),
            },
        );
    }
    feeds
}
